version: "3.3"
services:
  redis:
    image: "redis"
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    command: redis-server
    volumes:
      - cache:/data

  traefik:
    build:
      dockerfile: ./infra/traefik/traefik.Dockerfile
      context: .
    command:
      - "--configFile=traefik.yml"
      - "--providers.docker=true"
    ports:
      - "80:80"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./storage/traefiklogs:/traefiklogs"

  app:
    build:
      dockerfile: infra/app/Dockerfile
      context: .
    volumes:
      - ./src:/app/src
      - staticfiles:/app/static
      - mediafiles:/app/media
    ports:
      - 80
    env_file:
      - .env.dev

    labels:
      traefik.enable: true
      traefik.http.routers.api.rule: Host(`${HOST}`)
      traefik.http.routers.api.entrypoints: http
      traefik.http.services.app-service.loadbalancer.healthcheck.path: /health-check
      traefik.http.services.app-service.loadbalancer.healthcheck.timeout: 2s
      traefik.http.services.app-service.loadbalancer.healthcheck.interval: 5s
      traefik.http.services.app-service.loadbalancer.healthcheck.hostname: ${HOST}
    command: python3 manage.py runserver 0.0.0.0:80
    depends_on:
      - db
      - traefik
      - redis
    environment:
      - SQL_HOST=db
      - REDIS_HOST=redis

  db:
    image: postgres:13.0-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${SQL_PORT}:${SQL_PORT}"

    command: -p ${SQL_PORT}
    environment:
      POSTGRES_PASSWORD: ${SQL_PASSWORD}
      POSTGRES_USER: ${SQL_USER}
      POSTGRES_DB: ${SQL_DATABASE}

  celery-scheduler:
    build:
      dockerfile: infra/app/Dockerfile
      context: .
    env_file:
      - .env.dev
    command: python -m celery -A app beat
    entrypoint: []
    depends_on:
      - app
    environment:
      - SQL_HOST=db
      - REDIS_HOST=redis
    labels:
      - "traefik.enable=false"

  celery-worker:
    build:
      dockerfile: infra/app/Dockerfile
      context: .
    env_file:
      - .env.dev
    command: python -m celery -A app worker -P solo --concurrency 1 --events
    entrypoint: []
    depends_on:
      - app
    environment:
      - SQL_HOST=db
      - REDIS_HOST=redis
    labels:
      - "traefik.enable=false"

  nginx:
    depends_on:
      - traefik
      - app
    image: nginx:alpine
    expose:
      - 80
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - staticfiles:/app/static:ro
      - mediafiles:/app/media:ro
    labels:
      traefik.enable: "true"
      traefik.http.routers.nginx.rule: Host(`${HOST}`) && (PathPrefix(`/static`) || PathPrefix(`/media`))
      traefik.http.routers.nginx.entrypoints: http
      traefik.http.services.nginx.loadbalancer.server.port: "80"

volumes:
  staticfiles:
  mediafiles:
  postgres_data:
  cache:
  .:
