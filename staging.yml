version: "3.3"

services:
  redis:
    image: "redis"
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    command: redis-server --requirepass ${REDIS_PASSWORD} --replicaof no one --replica-read-only no
    volumes:
      - cache:/data
    labels:
      traefik.enable: "false"
    env_file:
      - .env

  traefik:
    build:
      dockerfile: infra/traefik/traefik.Dockerfile
      context: .
    command:
      - "--configFile=traefik.yml"
      - "--providers.docker=true"
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - "./infra/traefik/traefik.yml:/traefik.yml"
      - "./storage/letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./storage/traefiklogs:/traefiklogs"

  django: &django
    command: python3 -m gunicorn --bind 0.0.0.0:80 app.wsgi:application
    depends_on:
      traefik:
        condition: service_started
      redis:
        condition: service_started
      db_migration:
        condition: service_completed_successfully
      db:
        condition: service_started
    build:
      context: .
      dockerfile: infra/app/Dockerfile
    volumes:
      - staticfiles:/app/storage/static
    ports:
      - 80
    env_file:
      - .env
    environment:
      - REDIS_HOST=redis
      - SQL_HOST=db
    labels:
      traefik.enable: true
      traefik.http.routers.django.rule: Host(`${HOST}`)
      traefik.http.routers.django.entrypoints: http
      traefik.http.routers.django.middlewares: redirect
      traefik.http.middlewares.redirect.redirectscheme.scheme: https
      traefik.http.routers.django-secure.rule: Host(`${HOST}`)
      traefik.http.routers.django-secure.entrypoints: https
      traefik.http.routers.django-secure.tls.certresolver: ssl
      traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto: https
      traefik.http.services.django-service.loadbalancer.healthcheck.path: /health-check
      traefik.http.services.django-service.loadbalancer.healthcheck.timeout: 2s
      traefik.http.services.django-service.loadbalancer.healthcheck.interval: 5s
      traefik.http.services.django-service.loadbalancer.healthcheck.hostname: ${HOST}

  db:
    image: postgres:16-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${SQL_PORT}:${SQL_PORT}"

    command: -p ${SQL_PORT}
    environment:
      POSTGRES_PASSWORD: ${SQL_PASSWORD}
      POSTGRES_USER: ${SQL_USER}
      POSTGRES_DB: ${SQL_DATABASE}

  db_migration:
    <<: *django
    command: python manage.py migrate
    entrypoint: ["sh", "/app/before_migrate.sh"]
    ports: []
    depends_on:
      db:
        condition: service_started

  celery-scheduler:
    <<: *django
    command: python -m celery -A app beat
    ports: []
    labels:
      - "traefik.enable=false"

  celery-worker:
    <<: *django
    command: python -m celery -A app worker --events
    ports: []
    labels:
      - "traefik.enable=false"

  nginx:
    depends_on:
      - traefik
    image: nginx:alpine
    expose:
      - 80
    env_file:
      - .env
    volumes:
      - staticfiles:/app/storage/static
      - ./infra/nginx:/tmp
    environment:
      SERVER_NAME: ${HOST}
    command: /bin/sh -c "envsubst '$${SERVER_NAME}' < /tmp/nginx.conf.template > /etc/nginx/nginx.conf && nginx -g 'daemon off;'"
    labels:
      traefik.enable: "true"
      traefik.http.routers.nginx.rule: Host(`${HOST}`) && (PathPrefix(`/static`) || PathPrefix(`/media`))
      traefik.http.routers.nginx.entrypoints: http
      traefik.http.services.nginx.loadbalancer.server.port: "80"
      traefik.http.routers.nginx-secure.rule: Host(`${HOST}`) && (PathPrefix(`/static`) || PathPrefix(`/media`))
      traefik.http.routers.nginx-secure.entrypoints: https
      traefik.http.routers.nginx-secure.tls.certresolver: ssl
      traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto: https

volumes:
  cache:
  staticfiles:
  postgres_data:
